// Code generated by MockGen. DO NOT EDIT.
// Source: ./model.go

// Package account is a generated GoMock package.
package account

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertAccount mocks base method
func (m *MockRepository) InsertAccount(account Account) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", account)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount
func (mr *MockRepositoryMockRecorder) InsertAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockRepository)(nil).InsertAccount), account)
}

// InsertTransactions mocks base method
func (m *MockRepository) InsertTransactions(transaction Transaction) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactions", transaction)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransactions indicates an expected call of InsertTransactions
func (mr *MockRepositoryMockRecorder) InsertTransactions(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*MockRepository)(nil).InsertTransactions), transaction)
}

// GetAccount mocks base method
func (m *MockRepository) GetAccount(id int64) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", id)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockRepositoryMockRecorder) GetAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockRepository)(nil).GetAccount), id)
}

// GetOperationType mocks base method
func (m *MockRepository) GetOperationType(id int64) (*OperationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationType", id)
	ret0, _ := ret[0].(*OperationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationType indicates an expected call of GetOperationType
func (mr *MockRepositoryMockRecorder) GetOperationType(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationType", reflect.TypeOf((*MockRepository)(nil).GetOperationType), id)
}
